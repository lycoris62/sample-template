#name: CD
#
#on:
#  push:
#    branches: [ "main" ]
#
#env:
#  DOCKER_IMAGE_NAME: sample-docker-image-name
#  AWS_EC2_HOST: ${{ secrets.AWS_EC2_HOST }}
#  AWS_EC2_USERNAME: ${{ secrets.AWS_EC2_USERNAME }}
#  AWS_EC2_SSH_KEY: ${{ secrets.AWS_EC2_SSH_KEY }}
#  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
#  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
#  APPLICATION_PROD_YML: ${{ secrets.APPLICATION_PROD_YML }} # base64 인코딩 필요
#
#jobs:
#  build-and-push-docker:
#
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#
#    steps:
#      - uses: actions/checkout@v4
#        # 1. Java 17 세팅
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      # 2. Gradle 세팅
#      - name: Setup Gradle
#        uses: gradle/actions/setup-gradle@v4
#
#      # 3. YML 파일 생성 (base64 인코딩 필요)
#      - name: Set YML
#        run: |
#          mkdir -p src/main/resources
#          echo "${{ env.APPLICATION_PROD_YML }}" | base64 --decode > src/main/resources/application-prod.yml
#          find src
#
#      # 4. Gradle 빌드
#      - name: Build with Gradle
#        run: ./gradlew bootJar -Dspring.profiles.active=prod --exclude-task test
#
#      # 5. 도커 이미지 빌드
#      - name: Build the Docker image
#        run: docker build . --file Dockerfile --tag ${{ env.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
#
#      # 6. 도커 허브 로그인
#      - name: Login to Docker Hub using Access Token
#        run: echo "${{ env.DOCKER_HUB_TOKEN }}" | docker login -u ${{ env.DOCKER_HUB_USERNAME }} --password-stdin
#
#      # 7. 도커 허브에 이미지 푸시
#      - name: Push the Docker image
#        run: docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
#
#  deploy-to-ec2:
#
#    needs: build-and-push-docker
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Deploy to EC2
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ env.AWS_EC2_HOST }}
#          username: ${{ env.AWS_EC2_USERNAME }}
#          key: ${{ env.AWS_EC2_SSH_KEY }}
#          script: |
#            CONTAINER_ID=$(sudo docker ps -q --filter "publish=80-8080")
#
#            if [ ! -z "$CONTAINER_ID" ]; then
#              sudo docker stop $CONTAINER_ID
#              sudo docker rm $CONTAINER_ID
#            fi
#
#            sudo docker pull ${{ env.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
#            sudo docker run -d -p 80:8080 ${{ env.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}